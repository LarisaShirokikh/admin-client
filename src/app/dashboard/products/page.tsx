'use client';

import { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { useAuth } from '@/lib/auth';
import {
    Search,
    Plus,
    Edit,
    Trash2,
    Eye,
    Filter,
    RefreshCw,
    Package,
    AlertCircle,
    CheckCircle,
    XCircle,
    ChevronLeft,
    ChevronRight
} from 'lucide-react';
import { BulkEditData, BulkEditField, ProductListItem, ProductsStats, ProductUpdate } from '@/types/products';
import { handleApiError } from '@/lib/utils/errors';
import { productsApi } from '@/lib/api/products';
import { Brand } from '@/types/admin';
import { Category } from '@/types/categories';
import { brandsApi } from '@/lib/api/brands';
import { categoriesApi } from '@/lib/api/categories';
import { useToast } from '@/lib/contexts/ToastContext';
import { debounce } from 'lodash';
import ProductEditModal from '@/components/ProductEditModal';
import { DollarSign } from 'lucide-react';
// import PriceUpdateResultsModal from '@/components/PriceUpdateResultsModal';
import { PriceUpdateData } from '@/types/products';
import PriceBulkEditModal from '@/components/PriceBulkEditModal';
import { Catalog } from '@/types/catalogs';
import { catalogsApi } from '@/lib/api/catalogs';


export default function ProductsPage() {
    const { isSuperuser } = useAuth();
    const { showToast } = useToast();

    const abortControllerRef = useRef<AbortController | null>(null);

    // State
    const [products, setProducts] = useState<ProductListItem[]>([]);
    const [stats, setStats] = useState<ProductsStats | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Pagination & Filters
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage] = useState(20);
    const [totalItems, setTotalItems] = useState(0);
    const [search, setSearch] = useState('');
    const [searchInput, setSearchInput] = useState('');

    const [filters, setFilters] = useState({
        brand_id: undefined as number | undefined,
        catalog_id: undefined as number | undefined,
        category_id: undefined as number | undefined,
        is_active: true as boolean | undefined,
        in_stock: undefined as boolean | undefined,
        price_from: undefined as number | undefined,
        price_to: undefined as number | undefined,
    });
    const [sortBy, setSortBy] = useState('created_at');
    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
    const [showFilters, setShowFilters] = useState(true);

    const [selectedProducts, setSelectedProducts] = useState<number[]>([]);
    const [selectAll, setSelectAll] = useState(false);
    const [showBulkEditModal, setShowBulkEditModal] = useState(false);
    const [bulkEditData, setBulkEditData] = useState<BulkEditData>({
        price: '',
        discount_price: '',
        is_active: '',
        in_stock: '',
        category_ids: [] as number[],
        brand_id: '',
    });
    const [bulkEditLoading, setBulkEditLoading] = useState(false);
    const [brands, setBrands] = useState<Brand[]>([]);
    const [categories, setCategories] = useState<Category[]>([]);
    const [catalogs, setCatalogs] = useState<Catalog[]>([]);
    const [loadingBrands, setLoadingBrands] = useState(false);
    const [loadingCategories, setLoadingCategories] = useState(false);
    const [loadingCatalogs, setLoadingCatalogs] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const [showEditModal, setShowEditModal] = useState(false);
    const [editingProduct, setEditingProduct] = useState<ProductListItem | null>(null);
    const [editLoading, setEditLoading] = useState(false);

    const [showPriceBulkEdit, setShowPriceBulkEdit] = useState(false);
    const [priceBulkEditLoading, setPriceBulkEditLoading] = useState(false);

    const memoizedFilters = useMemo(() => ({
        brand_id: filters.brand_id,
        catalog_id: filters.catalog_id,
        category_id: filters.category_id,
        is_active: filters.is_active,
        in_stock: filters.in_stock,
        price_from: filters.price_from,
        price_to: filters.price_to,
    }), [
        filters.brand_id,
        filters.catalog_id,
        filters.category_id,
        filters.is_active,
        filters.in_stock,
        filters.price_from,
        filters.price_to,
    ]);

    const debouncedSearch = useMemo(
        () => debounce((searchTerm: string) => {
            setSearch(searchTerm);
            setCurrentPage(1);
        }, 500),
        []
    );

    // –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    const loadBrands = useCallback(async () => {
        try {
            setLoadingBrands(true);
            const brandsData = await brandsApi.getBrands();
            setBrands(brandsData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤:', error);
        } finally {
            setLoadingBrands(false);
        }
    }, []);

    const loadCategories = useCallback(async () => {
        try {
            setLoadingCategories(true);
            const categoriesData = await categoriesApi.getCategories();
            setCategories(categoriesData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        } finally {
            setLoadingCategories(false);
        }
    }, []);

    const loadCatalogs = useCallback(async () => {
        try {
            setLoadingCatalogs(true);
            const catalogsData = await catalogsApi.getAll();
            setCatalogs(catalogsData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:', error);
        } finally {
            setLoadingCatalogs(false);
        }
    }, []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const loadAllReferenceData = async () => {
            await Promise.all([
                loadBrands(),
                loadCategories(),
                loadCatalogs()
            ]);
        };

        loadAllReferenceData();
    }, [loadBrands, loadCategories, loadCatalogs]);

    // –ï–¥–∏–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    useEffect(() => {
        const loadData = async () => {
            try {
                // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                if (abortControllerRef.current) {
                    abortControllerRef.current.abort();
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                abortControllerRef.current = new AbortController();

                setLoading(true);
                setError(null);
                setSelectedProducts([]);
                setSelectAll(false);

                const params = {
                    skip: (currentPage - 1) * itemsPerPage,
                    limit: itemsPerPage,
                    search: search || undefined,
                    ...memoizedFilters,
                    sort_by: sortBy,
                    sort_order: sortOrder,
                };

                const [productsData, countData] = await Promise.all([
                    productsApi.getProducts(params),
                    productsApi.getCount({ search, ...memoizedFilters })
                ]);

                setProducts(productsData);
                setTotalItems(countData.count);
            } catch (error: unknown) {
                console.error('Load products error:', error);
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ—á–∏—â–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                setProducts([]);
                setTotalItems(0);

                // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –±–µ–∑ any
                let errorMessage = String(error);
                if (error && typeof error === 'object' && 'detail' in error) {
                    errorMessage = String((error as { detail: unknown }).detail);
                }

                if (errorMessage.includes('CORS') || errorMessage.includes('Network Error')) {
                    setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã CORS.');
                } else {
                    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
                }
            } finally {
                setLoading(false);
            }
        };

        loadData();
    }, [search, currentPage, itemsPerPage, memoizedFilters, sortBy, sortOrder]);

    // –û—á–∏—â–∞–µ–º debounce –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const currentAbortController = abortControllerRef.current;
        return () => {
            debouncedSearch.cancel();
            // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if (currentAbortController) {
                currentAbortController.abort();
            }
        };
    }, [debouncedSearch]);

    const handleOpenPriceBulkEdit = async () => {
        setShowPriceBulkEdit(true);
        // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    };

    const handleClosePriceBulkEdit = () => {
        setShowPriceBulkEdit(false);
    };

    const handlePriceBulkEditSave = async (data: PriceUpdateData) => {
        setPriceBulkEditLoading(true);
        try {
            console.log('üîç Sending bulk price update:', data);
            const response = await productsApi.bulkUpdatePrices(data);

            console.log('üì® Received response:', response);
            console.log('üìä Response details:', {
                success_count: response.success_count,
                failed_count: response.failed_count,
                total_updated: response.success_count + response.failed_count,
                updated_products_length: response.updated_products?.length
            });

            handleClosePriceBulkEdit();
            forceRefresh();
            await loadStats();

            if (response.failed_count === 0) {
                showToast('success', `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${response.success_count} —Ç–æ–≤–∞—Ä–æ–≤`);
            } else {
                showToast('warning', `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${response.success_count} –∏–∑ ${response.success_count + response.failed_count} —Ç–æ–≤–∞—Ä–æ–≤`);
            }

        } catch (error: unknown) {
            console.error('‚ùå Bulk price update error:', error);
            showToast('error', handleApiError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω'));
        } finally {
            setPriceBulkEditLoading(false);
        }
    };

    const handleEditProduct = async (product: ProductListItem) => {
        setEditingProduct(product);
        setShowEditModal(true);
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', product);
    };


    const handleCloseEdit = () => {
        setShowEditModal(false);
        setEditingProduct(null);
    };


    const handleSaveProduct = async (updatedData: ProductUpdate) => {
        if (!editingProduct) return;

        setEditLoading(true);
        try {
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞:', editingProduct.id, updatedData);

            const response = await productsApi.updateProduct(editingProduct.id, updatedData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            forceRefresh();
            await loadStats();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            handleCloseEdit();

            showToast('success', `–¢–æ–≤–∞—Ä "${editingProduct.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
            console.log('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', response);

        } catch (error: unknown) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
            showToast('error', handleApiError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞'));
        } finally {
            setEditLoading(false);
        }
    };


    const handleOpenBulkEdit = async () => {
        const commonCategoryIds = getCommonCategories();
        setBulkEditData({
            price: '',
            discount_price: '',
            is_active: '',
            in_stock: '',
            category_ids: commonCategoryIds,
            brand_id: '',
        });
        setShowBulkEditModal(true);
        console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', selectedProducts);
        console.log('–û–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', commonCategoryIds);
        // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    };

    const handleCategoryToggle = (categoryId: number) => {
        setBulkEditData(prev => ({
            ...prev,
            category_ids: prev.category_ids.includes(categoryId)
                ? prev.category_ids.filter(id => id !== categoryId)
                : [...prev.category_ids, categoryId]
        }));
    };


    const handleCloseBulkEdit = () => {
        setShowBulkEditModal(false);
        setBulkEditData({
            price: '',
            discount_price: '',
            is_active: '',
            in_stock: '',
            category_ids: [],
            brand_id: '',
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const handleBulkEditChange = (field: BulkEditField, value: string | number[]) => {
        setBulkEditData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleBulkEditSave = async () => {
        if (selectedProducts.length === 0) return;

        setBulkEditLoading(true);
        try {
            const updateData: Partial<ProductUpdate> = {};

            if (bulkEditData.price) updateData.price = Number(bulkEditData.price);
            if (bulkEditData.discount_price) updateData.discount_price = Number(bulkEditData.discount_price);
            if (bulkEditData.is_active !== '') updateData.is_active = bulkEditData.is_active === 'true';
            if (bulkEditData.in_stock !== '') updateData.in_stock = bulkEditData.in_stock === 'true';
            if (bulkEditData.category_ids.length > 0) updateData.category_ids = bulkEditData.category_ids;
            if (bulkEditData.brand_id) updateData.brand_id = Number(bulkEditData.brand_id);

            const batchResponse = await productsApi.batchUpdateProducts({
                product_ids: selectedProducts,
                update_data: updateData
            });

            forceRefresh();
            await loadStats();

            handleCloseBulkEdit();
            setSelectedProducts([]);
            setSelectAll(false);

            if (batchResponse.failed_count > 0) {
                showToast('warning',
                    `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${batchResponse.success_count} –∏–∑ ${selectedProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. ${batchResponse.failed_count} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.`
                );

                console.log('–û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
                batchResponse.failed_products.forEach(error => {
                    console.log(`–ü—Ä–æ–¥—É–∫—Ç ${error.product_id}: ${error.error}`);
                });
            } else {
                showToast('success', `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${batchResponse.success_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
            }

        } catch (error: unknown) {
            console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            showToast('error', handleApiError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'));
        } finally {
            setBulkEditLoading(false);
        }
    };

    const getCommonCategories = useCallback(() => {
        if (selectedProducts.length === 0) return [];

        const selectedProductsData = products.filter(p => selectedProducts.includes(p.id));

        if (selectedProductsData.length === 0) return [];

        if (selectedProductsData.length === 1) {
            return selectedProductsData[0].categories?.map(cat => cat.id) || [];
        }


        const firstProductCategories = selectedProductsData[0].categories?.map(cat => cat.id) || [];

        return firstProductCategories.filter(categoryId =>
            selectedProductsData.every(product =>
                product.categories?.some(cat => cat.id === categoryId)
            )
        );
    }, [selectedProducts, products]);


    const forceRefresh = useCallback(() => {

        setSearch(prev => prev === '' ? ' ' : '');
        setCurrentPage(1);
    }, []);

    const handleSearchInput = useCallback((value: string) => {
        console.log('handleSearchInput called with:', value);
        setSearchInput(value);
        debouncedSearch(value);
    }, [debouncedSearch]);


    const clearSearch = useCallback(() => {
        setSearchInput('');
        setSearch('');
        setCurrentPage(1);
        debouncedSearch.cancel();

        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
        }
    }, [debouncedSearch]);

    // Load stats
    const loadStats = useCallback(async () => {
        try {
            const statsData = await productsApi.getStats();
            setStats(statsData);
        } catch {
            console.error('Load stats error');
        }
    }, []);

    // Effects
    useEffect(() => {
        loadStats();
    }, [loadStats]);

    const handleFilterChange = (newFilters: typeof filters) => {
        setFilters(newFilters);
        setCurrentPage(1);
    };

    const handleSort = (field: string) => {
        if (sortBy === field) {
            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
        } else {
            setSortBy(field);
            setSortOrder('asc');
        }
        setCurrentPage(1);
    };

    const handleToggleStatus = async (product: ProductListItem) => {
        try {
            await productsApi.toggleProductStatus(product.id);
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            forceRefresh();
            await loadStats();
            showToast('success', `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ "${product.name}" –∏–∑–º–µ–Ω–µ–Ω`);
        } catch {
            showToast('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞');
        }
    };

    const handleDelete = async (product: ProductListItem) => {
        if (!isSuperuser) {
            showToast('error', '–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã');
            return;
        }

        if (!confirm(`–í–ù–ò–ú–ê–ù–ò–ï! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ò–¢–¨ "${product.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)) return;

        try {
            await productsApi.deleteProduct(product.id);
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            forceRefresh();
            await loadStats();
            showToast('success', `–ü—Ä–æ–¥—É–∫—Ç "${product.name}" —É–¥–∞–ª–µ–Ω`);
        } catch {
            showToast('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
        }
    };

    // Pagination calculations
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const startItem = (currentPage - 1) * itemsPerPage + 1;
    const endItem = Math.min(currentPage * itemsPerPage, totalItems);

    const formatPrice = (price: number) => {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB'
        }).format(price);
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleString('ru-RU');
    };

    const handleSelectProduct = (productId: number) => {
        setSelectedProducts(prev => {
            if (prev.includes(productId)) {
                return prev.filter(id => id !== productId);
            } else {
                return [...prev, productId];
            }
        });
    };

    const handleSelectAll = () => {
        if (selectAll) {
            setSelectedProducts([]);
        } else {
            setSelectedProducts(products.map(p => p.id));
        }
        setSelectAll(!selectAll);
    };

    useEffect(() => {
        if (products.length > 0) {
            setSelectAll(selectedProducts.length === products.length);
        }
    }, [selectedProducts, products]);

    return (
        <div className="space-y-6">
            {/* Error Alert */}
            {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-center gap-3">
                    <AlertCircle className="h-5 w-5 text-red-600" />
                    <span className="text-red-800">{error}</span>
                    <button
                        onClick={() => setError(null)}
                        className="ml-auto text-red-600 hover:text-red-800"
                    >
                        <XCircle className="h-4 w-4" />
                    </button>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ */}
            {showEditModal && editingProduct && (
                <ProductEditModal
                    product={editingProduct}
                    brands={brands}
                    categories={categories}
                    loading={editLoading}
                    onSave={handleSaveProduct}
                    onClose={handleCloseEdit}
                />
            )}

            {/* Header */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                    <h1 className="text-2xl font-bold text-gray-900">–ü—Ä–æ–¥—É–∫—Ç—ã</h1>
                    <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤</p>
                </div>
                <div className="flex gap-2">
                    <button
                        onClick={forceRefresh}
                        className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                    >
                        <RefreshCw className="h-4 w-4" />
                        –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button
                        onClick={handleOpenPriceBulkEdit}
                        className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                    >
                        <DollarSign className="h-4 w-4" />
                        –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã
                    </button>
                    <button
                        onClick={() => alert('–ú–æ–¥–∞–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ')}
                        className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                        <Plus className="h-4 w-4" />
                        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
                    </button>
                </div>
            </div>

            {/* Stats Cards */}
            {stats && (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <div className="flex items-center">
                            <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                    <Package className="h-5 w-5 text-blue-600" />
                                </div>
                            </div>
                            <div className="ml-4">
                                <div className="text-sm font-medium text-gray-500">–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</div>
                                <div className="text-2xl font-bold text-gray-900">{stats.total_products}</div>
                            </div>
                        </div>
                    </div>

                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <div className="flex items-center">
                            <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                                    <CheckCircle className="h-5 w-5 text-green-600" />
                                </div>
                            </div>
                            <div className="ml-4">
                                <div className="text-sm font-medium text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                                <div className="text-2xl font-bold text-gray-900">{stats.active_products}</div>
                            </div>
                        </div>
                    </div>

                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <div className="flex items-center">
                            <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                                    <Package className="h-5 w-5 text-yellow-600" />
                                </div>
                            </div>
                            <div className="ml-4">
                                <div className="text-sm font-medium text-gray-500">–í –Ω–∞–ª–∏—á–∏–∏</div>
                                <div className="text-2xl font-bold text-gray-900">{stats.products_in_stock}</div>
                            </div>
                        </div>
                    </div>

                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <div className="flex items-center">
                            <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                                    <XCircle className="h-5 w-5 text-red-600" />
                                </div>
                            </div>
                            <div className="ml-4">
                                <div className="text-sm font-medium text-gray-500">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
                                <div className="text-2xl font-bold text-gray-900">{stats.inactive_products}</div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Search and Filters */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex flex-col lg:flex-row gap-4">
                    {/* Search */}
                    <div className="flex-1">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                            <input
                                type="text"
                                value={searchInput}
                                onChange={(e) => handleSearchInput(e.target.value)}
                                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é, SKU, –±—Ä–µ–Ω–¥—É..."
                                className="w-full pl-10 pr-12 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                {loading && search ? (
                                    <RefreshCw className="h-4 w-4 text-gray-400 animate-spin" />
                                ) : searchInput ? (
                                    <button
                                        onClick={clearSearch}
                                        className="text-gray-400 hover:text-gray-600 transition-colors"
                                        title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
                                    >
                                        <XCircle className="h-4 w-4" />
                                    </button>
                                ) : null}
                            </div>
                        </div>
                        {search && !loading && (
                            <div className="mt-2 text-sm text-gray-600">
                                {totalItems > 0 ? (
                                    <>
                                        –ù–∞–π–¥–µ–Ω–æ <span className="font-medium">{totalItems}</span> —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                                        <span className="font-medium"> &quot;{search}&quot;</span>
                                    </>
                                ) : (
                                    <>
                                        –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                                        <span className="font-medium"> &quot;{search}&quot;</span>
                                    </>
                                )}
                            </div>
                        )}
                    </div>

                    {/* Filter Toggle */}
                    <button
                        onClick={() => setShowFilters(!showFilters)}
                        className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                        <Filter className="h-4 w-4" />
                        –§–∏–ª—å—Ç—Ä—ã
                    </button>
                </div>

                {/* Extended Filters */}
                {showFilters && (
                    <div className="mt-4 pt-4 border-t border-gray-200">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                            {/* –ö–∞—Ç–∞–ª–æ–≥ */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–∞–ª–æ–≥</label>
                                <select
                                    value={filters.catalog_id || ''}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        catalog_id: e.target.value ? Number(e.target.value) : undefined
                                    })}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    disabled={loadingCatalogs}
                                >
                                    <option value="">–í—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏</option>
                                    {loadingCatalogs ? (
                                        <option disabled>–ó–∞–≥—Ä—É–∑–∫–∞...</option>
                                    ) : catalogs.length === 0 ? (
                                        <option disabled>–ö–∞—Ç–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</option>
                                    ) : (
                                        catalogs.map(catalog => (
                                            <option key={catalog.id} value={catalog.id}>
                                                {catalog.name}
                                            </option>
                                        ))
                                    )}
                                </select>
                                {loadingCatalogs && (
                                    <div className="mt-1 text-xs text-gray-500 flex items-center gap-1">
                                        <RefreshCw className="h-3 w-3 animate-spin" />
                                        –ó–∞–≥—Ä—É–∑–∫–∞...
                                    </div>
                                )}
                            </div>

                            {/* –ë—Ä–µ–Ω–¥ */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–ë—Ä–µ–Ω–¥</label>
                                <select
                                    value={filters.brand_id || ''}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        brand_id: e.target.value ? Number(e.target.value) : undefined
                                    })}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    disabled={loadingBrands}
                                >
                                    <option value="">–í—Å–µ –±—Ä–µ–Ω–¥—ã</option>
                                    {loadingBrands ? (
                                        <option disabled>–ó–∞–≥—Ä—É–∑–∫–∞...</option>
                                    ) : brands.length === 0 ? (
                                        <option disabled>–ë—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</option>
                                    ) : (
                                        brands.map(brand => (
                                            <option key={brand.id} value={brand.id}>
                                                {brand.name}
                                            </option>
                                        ))
                                    )}
                                </select>
                                {loadingBrands && (
                                    <div className="mt-1 text-xs text-gray-500 flex items-center gap-1">
                                        <RefreshCw className="h-3 w-3 animate-spin" />
                                        –ó–∞–≥—Ä—É–∑–∫–∞...
                                    </div>
                                )}
                            </div>

                            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                                <select
                                    value={filters.category_id || ''}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        category_id: e.target.value ? Number(e.target.value) : undefined
                                    })}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    disabled={loadingCategories}
                                >
                                    <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                    {loadingCategories ? (
                                        <option disabled>–ó–∞–≥—Ä—É–∑–∫–∞...</option>
                                    ) : categories.length === 0 ? (
                                        <option disabled>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</option>
                                    ) : (
                                        categories.map(category => (
                                            <option key={category.id} value={category.id}>
                                                {category.name}
                                            </option>
                                        ))
                                    )}
                                </select>
                                {loadingCategories && (
                                    <div className="mt-1 text-xs text-gray-500 flex items-center gap-1">
                                        <RefreshCw className="h-3 w-3 animate-spin" />
                                        –ó–∞–≥—Ä—É–∑–∫–∞...
                                    </div>
                                )}
                            </div>

                            {/* –°—Ç–∞—Ç—É—Å */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–°—Ç–∞—Ç—É—Å</label>
                                <select
                                    value={filters.is_active === undefined ? '' : filters.is_active.toString()}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        is_active: e.target.value === '' ? undefined : e.target.value === 'true'
                                    })}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    <option value="">–í—Å–µ</option>
                                    <option value="true">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                                    <option value="false">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                                </select>
                            </div>

                            {/* –ù–∞–ª–∏—á–∏–µ */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–ª–∏—á–∏–µ</label>
                                <select
                                    value={filters.in_stock === undefined ? '' : filters.in_stock.toString()}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        in_stock: e.target.value === '' ? undefined : e.target.value === 'true'
                                    })}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    <option value="">–í—Å–µ</option>
                                    <option value="true">–í –Ω–∞–ª–∏—á–∏–∏</option>
                                    <option value="false">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</option>
                                </select>
                            </div>

                            {/* –¶–µ–Ω–∞ –æ—Ç */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–¶–µ–Ω–∞ –æ—Ç</label>
                                <input
                                    type="number"
                                    value={filters.price_from || ''}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        price_from: e.target.value ? Number(e.target.value) : undefined
                                    })}
                                    placeholder="0"
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>

                            {/* –¶–µ–Ω–∞ –¥–æ */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">–¶–µ–Ω–∞ –¥–æ</label>
                                <input
                                    type="number"
                                    value={filters.price_to || ''}
                                    onChange={(e) => handleFilterChange({
                                        ...filters,
                                        price_to: e.target.value ? Number(e.target.value) : undefined
                                    })}
                                    placeholder="‚àû"
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        </div>

                        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                        <div className="mt-4 flex flex-col sm:flex-row gap-4 justify-between">
                            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
                            <div className="flex flex-wrap gap-2">
                                {filters.catalog_id && (
                                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                                        –ö–∞—Ç–∞–ª–æ–≥: {catalogs.find(c => c.id === filters.catalog_id)?.name}
                                        <button
                                            onClick={() => handleFilterChange({ ...filters, catalog_id: undefined })}
                                            className="hover:text-blue-900"
                                        >
                                            <XCircle className="h-3 w-3" />
                                        </button>
                                    </span>
                                )}
                                {filters.brand_id && (
                                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                                        –ë—Ä–µ–Ω–¥: {brands.find(b => b.id === filters.brand_id)?.name}
                                        <button
                                            onClick={() => handleFilterChange({ ...filters, brand_id: undefined })}
                                            className="hover:text-green-900"
                                        >
                                            <XCircle className="h-3 w-3" />
                                        </button>
                                    </span>
                                )}
                                {filters.category_id && (
                                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
                                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {categories.find(c => c.id === filters.category_id)?.name}
                                        <button
                                            onClick={() => handleFilterChange({ ...filters, category_id: undefined })}
                                            className="hover:text-purple-900"
                                        >
                                            <XCircle className="h-3 w-3" />
                                        </button>
                                    </span>
                                )}
                                {filters.is_active !== undefined && (
                                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                                        {filters.is_active ? '–ê–∫—Ç–∏–≤–Ω—ã–µ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ'}
                                        <button
                                            onClick={() => handleFilterChange({ ...filters, is_active: undefined })}
                                            className="hover:text-yellow-900"
                                        >
                                            <XCircle className="h-3 w-3" />
                                        </button>
                                    </span>
                                )}
                                {filters.in_stock !== undefined && (
                                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full">
                                        {filters.in_stock ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                                        <button
                                            onClick={() => handleFilterChange({ ...filters, in_stock: undefined })}
                                            className="hover:text-orange-900"
                                        >
                                            <XCircle className="h-3 w-3" />
                                        </button>
                                    </span>
                                )}
                                {(filters.price_from || filters.price_to) && (
                                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                                        –¶–µ–Ω–∞: {filters.price_from || 0} - {filters.price_to || '‚àû'}
                                        <button
                                            onClick={() => handleFilterChange({
                                                ...filters,
                                                price_from: undefined,
                                                price_to: undefined
                                            })}
                                            className="hover:text-red-900"
                                        >
                                            <XCircle className="h-3 w-3" />
                                        </button>
                                    </span>
                                )}
                            </div>

                            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                            <div className="flex gap-2">
                                <button
                                    onClick={() => {
                                        setFilters({
                                            brand_id: undefined,
                                            catalog_id: undefined,
                                            category_id: undefined,
                                            is_active: true,
                                            in_stock: undefined,
                                            price_from: undefined,
                                            price_to: undefined,
                                        });
                                        clearSearch();
                                    }}
                                    className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm"
                                >
                                    –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                                </button>
                                <div className="text-sm text-gray-500 self-center">
                                    –ù–∞–π–¥–µ–Ω–æ: <span className="font-medium">{totalItems}</span> —Ç–æ–≤–∞—Ä–æ–≤
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* Products Table */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                {loading ? (
                    <div className="p-12 text-center">
                        <div className="inline-flex items-center gap-2 text-gray-600">
                            <RefreshCw className="h-5 w-5 animate-spin" />
                            –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...
                        </div>
                    </div>
                ) : products.length === 0 ? (
                    <div className="p-12 text-center">
                        <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                        <p className="text-gray-600 mb-4">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç</p>
                        <button
                            onClick={() => alert('–ú–æ–¥–∞–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ')}
                            className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            <Plus className="h-4 w-4" />
                            –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
                        </button>
                    </div>
                ) : (
                    <>
                        <div className="overflow-x-auto">
                            <table className="w-full">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left">
                                            <input
                                                type="checkbox"
                                                checked={selectAll}
                                                onChange={handleSelectAll}
                                                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                            />
                                        </th>
                                        <th className="px-6 py-3 text-left">
                                            <button
                                                onClick={() => handleSort('name')}
                                                className="flex items-center gap-1 text-xs font-medium text-gray-500 uppercase tracking-wider hover:text-gray-700"
                                            >
                                                –ù–∞–∑–≤–∞–Ω–∏–µ
                                                {sortBy === 'name' && (
                                                    <span className="text-blue-600">
                                                        {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
                                                    </span>
                                                )}
                                            </button>
                                        </th>
                                        <th className="px-6 py-3 text-left">
                                            <button
                                                onClick={() => handleSort('price')}
                                                className="flex items-center gap-1 text-xs font-medium text-gray-500 uppercase tracking-wider hover:text-gray-700"
                                            >
                                                –¶–µ–Ω–∞
                                                {sortBy === 'price' && (
                                                    <span className="text-blue-600">
                                                        {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
                                                    </span>
                                                )}
                                            </button>
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            –ë—Ä–µ–Ω–¥
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            –°—Ç–∞—Ç—É—Å
                                        </th>
                                        <th className="px-6 py-3 text-left">
                                            <button
                                                onClick={() => handleSort('created_at')}
                                                className="flex items-center gap-1 text-xs font-medium text-gray-500 uppercase tracking-wider hover:text-gray-700"
                                            >
                                                –°–æ–∑–¥–∞–Ω
                                                {sortBy === 'created_at' && (
                                                    <span className="text-blue-600">
                                                        {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
                                                    </span>
                                                )}
                                            </button>
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            –î–µ–π—Å—Ç–≤–∏—è
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {products.map((product) => (
                                        <tr
                                            key={product.id}
                                            className={`hover:bg-gray-50 ${selectedProducts.includes(product.id) ? 'bg-blue-50' : ''}`}
                                        >
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <input
                                                    type="checkbox"
                                                    checked={selectedProducts.includes(product.id)}
                                                    onChange={() => handleSelectProduct(product.id)}
                                                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                                />
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="flex items-center">
                                                    {product.main_image && (
                                                        // eslint-disable-next-line @next/next/no-img-element
                                                        <img
                                                            src={product.main_image}
                                                            alt={product.name}
                                                            className="h-10 w-10 rounded-lg object-cover mr-3"
                                                        />
                                                    )}
                                                    <div>
                                                        <div className="text-sm font-medium text-gray-900">
                                                            {product.name}
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="text-sm text-gray-900">
                                                    {formatPrice(product.price)}
                                                </div>
                                                {product.discount_price && (
                                                    <div className="text-sm text-red-600">
                                                        {formatPrice(product.discount_price)}
                                                    </div>
                                                )}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="text-sm text-gray-900">
                                                    {product.brand?.name || '-'}
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="flex flex-wrap gap-1">
                                                    {product.categories && product.categories.length > 0 ? (
                                                        product.categories.slice(0, 2).map((category) => (
                                                            <span
                                                                key={category.id}
                                                                className="inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full"
                                                            >
                                                                {category.name}
                                                            </span>
                                                        ))
                                                    ) : (
                                                        <span className="text-sm text-gray-500">-</span>
                                                    )}
                                                    {product.categories && product.categories.length > 2 && (
                                                        <span className="text-xs text-gray-500">
                                                            +{product.categories.length - 2}
                                                        </span>
                                                    )}
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${product.is_active
                                                    ? 'bg-green-100 text-green-800'
                                                    : 'bg-red-100 text-red-800'
                                                    }`}>
                                                    {product.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                                                </span>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="text-sm text-gray-900">
                                                    {formatDate(product.created_at)}
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                <div className="flex items-center justify-end gap-2">
                                                    <button
                                                        onClick={() => alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞: ${product.name}`)}
                                                        className="text-blue-600 hover:text-blue-800"
                                                        title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                                                    >
                                                        <Eye className="h-4 w-4" />
                                                    </button>
                                                    <button
                                                        onClick={() => handleEditProduct(product)}
                                                        className="text-indigo-600 hover:text-indigo-800"
                                                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                                    >
                                                        <Edit className="h-4 w-4" />
                                                    </button>
                                                    <button
                                                        onClick={() => handleToggleStatus(product)}
                                                        className={`${product.is_active ? 'text-yellow-600 hover:text-yellow-800' : 'text-green-600 hover:text-green-800'}`}
                                                        title={product.is_active ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                                                    >
                                                        {product.is_active ? <XCircle className="h-4 w-4" /> : <CheckCircle className="h-4 w-4" />}
                                                    </button>
                                                    {isSuperuser && (
                                                        <button
                                                            onClick={() => handleDelete(product)}
                                                            className="text-red-600 hover:text-red-800"
                                                            title="–£–¥–∞–ª–∏—Ç—å"
                                                        >
                                                            <Trash2 className="h-4 w-4" />
                                                        </button>
                                                    )}
                                                </div>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                            {selectedProducts.length > 0 && (
                                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 flex items-center justify-between">
                                    <div className="flex items-center gap-3">
                                        <span className="text-blue-800 font-medium">
                                            –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {selectedProducts.length}
                                        </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <button
                                            onClick={handleOpenBulkEdit}
                                            className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
                                        >
                                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ({selectedProducts.length})
                                        </button>
                                        <button
                                            onClick={() => setSelectedProducts([])}
                                            className="px-3 py-1 bg-gray-600 text-white text-sm rounded hover:bg-gray-700 transition-colors"
                                        >
                                            –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Pagination */}
                        <div className="bg-white px-6 py-3 border-t border-gray-200 flex items-center justify-between">
                            <div className="flex-1 flex justify-between sm:hidden">
                                <button
                                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                                    disabled={currentPage === 1}
                                    className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                                </button>
                                <button
                                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                                    disabled={currentPage === totalPages}
                                    className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    –°–ª–µ–¥—É—é—â–∞—è
                                </button>
                            </div>
                            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                                <div>
                                    <p className="text-sm text-gray-700">
                                        –ü–æ–∫–∞–∑–∞–Ω–æ <span className="font-medium">{startItem}</span> - <span className="font-medium">{endItem}</span> –∏–∑{' '}
                                        <span className="font-medium">{totalItems}</span> —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                    </p>
                                </div>
                                <div>
                                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                                        <button
                                            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                                            disabled={currentPage === 1}
                                            className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            <ChevronLeft className="h-5 w-5" />
                                        </button>

                                        {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                            const page = Math.max(1, currentPage - 2) + i;
                                            if (page > totalPages) return null;

                                            return (
                                                <button
                                                    key={page}
                                                    onClick={() => setCurrentPage(page)}
                                                    className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${page === currentPage
                                                        ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                                                        : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                                                        }`}
                                                >
                                                    {page}
                                                </button>
                                            );
                                        })}

                                        <button
                                            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                                            disabled={currentPage === totalPages}
                                            className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            <ChevronRight className="h-5 w-5" />
                                        </button>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </>
                )}
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω */}
            {showPriceBulkEdit && (
                <PriceBulkEditModal
                    isOpen={showPriceBulkEdit}
                    onClose={handleClosePriceBulkEdit}
                    onSave={handlePriceBulkEditSave}
                    brands={brands}
                    categories={categories}
                    catalogs={catalogs}
                    loading={priceBulkEditLoading}
                />
            )}

            {showBulkEditModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                        {/* Header */}
                        <div className="flex items-center justify-between p-6 border-b border-gray-200">
                            <h2 className="text-xl font-semibold text-gray-900">
                                –ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ({selectedProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
                            </h2>
                            <button
                                onClick={handleCloseBulkEdit}
                                className="text-gray-400 hover:text-gray-600"
                            >
                                <XCircle className="h-6 w-6" />
                            </button>
                        </div>

                        {/* Content */}
                        <div className="p-6 space-y-6">
                            <div className="text-sm text-gray-600 mb-4">
                                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
                                –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
                            </div>

                            {/* Price fields */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        –¶–µ–Ω–∞ (‚ÇΩ)
                                    </label>
                                    <input
                                        type="number"
                                        value={bulkEditData.price}
                                        onChange={(e) => handleBulkEditChange('price', e.target.value)}
                                        placeholder="–ù–µ –∏–∑–º–µ–Ω—è—Ç—å"
                                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π (‚ÇΩ)
                                    </label>
                                    <input
                                        type="number"
                                        value={bulkEditData.discount_price}
                                        onChange={(e) => handleBulkEditChange('discount_price', e.target.value)}
                                        placeholder="–ù–µ –∏–∑–º–µ–Ω—è—Ç—å"
                                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            </div>

                            {/* Status fields */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                                    </label>
                                    <select
                                        value={bulkEditData.is_active}
                                        onChange={(e) => handleBulkEditChange('is_active', e.target.value)}
                                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    >
                                        <option value="">–ù–µ –∏–∑–º–µ–Ω—è—Ç—å</option>
                                        <option value="true">–ê–∫—Ç–∏–≤–µ–Ω</option>
                                        <option value="false">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
                                    </label>
                                    <select
                                        value={bulkEditData.in_stock}
                                        onChange={(e) => handleBulkEditChange('in_stock', e.target.value)}
                                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    >
                                        <option value="">–ù–µ –∏–∑–º–µ–Ω—è—Ç—å</option>
                                        <option value="true">–í –Ω–∞–ª–∏—á–∏–∏</option>
                                        <option value="false">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</option>
                                    </select>
                                </div>
                            </div>

                            {/* Brand field */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    –ë—Ä–µ–Ω–¥
                                </label>
                                <select
                                    value={bulkEditData.brand_id}
                                    onChange={(e) => handleBulkEditChange('brand_id', e.target.value)}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    disabled={loadingBrands}
                                >
                                    <option value="">–ù–µ –∏–∑–º–µ–Ω—è—Ç—å</option>
                                    {loadingBrands ? (
                                        <option disabled>–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...</option>
                                    ) : brands.length === 0 ? (
                                        <option disabled>–ë—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</option>
                                    ) : (
                                        brands.map(brand => (
                                            <option key={brand.id} value={brand.id}>
                                                {brand.name}
                                            </option>
                                        ))
                                    )}
                                </select>
                                {loadingBrands && (
                                    <div className="mt-1 text-sm text-gray-500 flex items-center gap-1">
                                        <RefreshCw className="h-3 w-3 animate-spin" />
                                        –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...
                                    </div>
                                )}
                            </div>

                            {/* Categories field */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                                </label>
                                <div className="text-sm text-gray-500 mb-2">
                                    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)
                                </div>
                                <div className="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                                    {loadingCategories ? (
                                        <div className="text-gray-500 text-center py-4">
                                            <RefreshCw className="h-4 w-4 animate-spin mx-auto mb-2" />
                                            –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...
                                        </div>
                                    ) : categories.length === 0 ? (
                                        <div className="text-gray-500 text-center py-4">
                                            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                                        </div>
                                    ) : (
                                        <div className="space-y-2">
                                            {categories.map(category => (
                                                <label key={category.id} className="flex items-center gap-2 cursor-pointer hover:bg-gray-50 p-2 rounded">
                                                    <input
                                                        type="checkbox"
                                                        checked={bulkEditData.category_ids.includes(category.id)}
                                                        onChange={() => handleCategoryToggle(category.id)}
                                                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                                    />
                                                    <span className="text-sm text-gray-700">{category.name}</span>
                                                    {category.description && (
                                                        <span className="text-xs text-gray-500 ml-1">- {category.description}</span>
                                                    )}
                                                </label>
                                            ))}
                                        </div>
                                    )}
                                </div>
                                {bulkEditData.category_ids.length > 0 && (
                                    <div className="mt-2 text-sm text-blue-600">
                                        –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {bulkEditData.category_ids.length}
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* Footer */}
                        <div className="flex items-center justify-end gap-4 p-6 border-t border-gray-200">
                            <button
                                onClick={handleCloseBulkEdit}
                                disabled={bulkEditLoading}
                                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50"
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                onClick={handleBulkEditSave}
                                disabled={bulkEditLoading}
                                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center gap-2"
                            >
                                {bulkEditLoading && <RefreshCw className="h-4 w-4 animate-spin" />}
                                {bulkEditLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}